//
//  StoreInteractor.swift
//  PruebaLiverpool
//
//  Created Osvaldo Salas Palomo on 10/02/23.
//  Copyright Â© 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Osva
//

import UIKit

class StoreInteractor: StoreInteractorInputProtocol {
    
    weak var presenter: StoreInteractorOutputProtocol?
    
    func getData(search: String, page: String, filtro:FilterUrl) {
        let queue = OperationQueue()
        DispatchQueue.global(qos: .userInteractive).asyncAfter(deadline: .now(), execute: { [self] in
            queue.qualityOfService = .userInitiated
            let operation1 = BlockOperation {
                self.request(urlString: filtro.getUrlFilter(search: search, page: page, filtro: filtro))
            }
            queue.addOperations([operation1], waitUntilFinished: true)
        })
    }
    
    func request(urlString: String) {
        let url = URL(string: urlString)!

        var urlRequest: URLRequest? = nil
        let timeOut: TimeInterval = 30.0
        let cachePolicy: NSURLRequest.CachePolicy = .reloadIgnoringLocalAndRemoteCacheData
        
        urlRequest = URLRequest(url: url, cachePolicy: cachePolicy,
                                timeoutInterval: timeOut)
        
        urlRequest!.httpMethod = "GET"

        let urlSession = URLSession.shared.dataTask(with: urlRequest!) { data, response, error in
            if let err = error {
                self.presenter?.willShowError()
                return
            }

            guard let urlResponse = response as? HTTPURLResponse else {
                self.presenter?.willShowError()
                return
            }
            if !(200..<300).contains(urlResponse.statusCode) {
                self.presenter?.willShowError()
                return
            }

            guard let data = data else { return }
            do {
                let store = try JSONDecoder().decode(StoreModel.self, from: data)
                OperationQueue.main.addOperation { [weak self] in
                    self?.presenter?.willShowData(data: store)
                }
            } catch let DecodingError.dataCorrupted(context) {
                debugPrint("Contexto: \(context)")
            } catch let DecodingError.keyNotFound(key, context) {
                debugPrint("Key '\(key)' not found:", context.debugDescription)
                debugPrint("codingPath:", context.codingPath)
            } catch let DecodingError.valueNotFound(value, context) {
                debugPrint("Value '\(value)' not found:", context.debugDescription)
                debugPrint("codingPath:", context.codingPath)
            } catch let DecodingError.typeMismatch(type, context)  {
                debugPrint("Type '\(type)' mismatch:", context.debugDescription)
                debugPrint("codingPath:", context.codingPath)
            } catch {
                debugPrint("error: ", error)
            }
        }

        urlSession.resume()
    }
}

enum FilterUrl: String {
    case Predefinida = "Predefinida"
    case Menorprecio = "Menor precio"
    case Mayorprecio = "Mayor precio"
    
    func getUrlFilter(search: String, page: String, filtro:FilterUrl) -> String {
        switch self {
        case .Predefinida:
            return "https://shoppapp.liverpool.com.mx/appclienteservices/services/v3/plp?search-string=\(search)&page-number=\(page)"
        case .Menorprecio:
        return "https://shoppapp.liverpool.com.mx/appclienteservices/services/v3/plp?search-string=\(search)&page-number=\(page)&minSortPrice|0"
        case .Mayorprecio:
            return "https://shoppapp.liverpool.com.mx/appclienteservices/services/v3/plp?search-string=\(search)&page-number=\(page)&minSortPrice|1"
        }
    }
}
